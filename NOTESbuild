NOTEs on building code

code dir
LAYERS_SIZE.h set number of layers N_Layers =50
SIZE.h set number of procs and domain
DIAGNOSTICS_SIZE.h set number of diagnostics to 10*Nr

I have currently chosen 50 density layers between 23 and 28 to test the output - sybren suggest to go to 250-500 layers, but will have to test the time costs!

go to build dir
cp -p the size files from code dir
check packages.conf has all packages enabled
make CLEAN
edit genmake2 accodingly
genmake2 --mpi --enable=layers --enable=diagnostics --optfile=../linux_iridis4
(The linux_ file tells it about the machine)
make depend
make

if on iridis 4 then cp ini_parms.f from ../code . and touch ini_parms.f:
cp -p ../code/ini_parms.f .
touch ini_parms.f

move executable out to working directory

set up mitgcmuv link to executable

setup data.layers as follows:

&LAYERS_PARM01
# 5 year averaging in seconds
  layers_taveFreq=155520000,
# no instantaneous output
#LAYER_nb=3 sets layers to be in potential density
  LAYER_nb=3,
  layers_diagFreq=0.,
  layers_G=23.0,23.1,23.2,23.3,23.4,23.5,
           23.6,23.7,23.8,23.9,24.0,24.1,
           24.2,24.3,24.4,24.5,24.6,24.7,
           24.8,24.9,25.0,25.1,25.2,25.3,
           25.4,25.5,25.6,25.7,25.8,25.9,
           26.0,26.1,26.2,26.3,26.4,26.5,
           26.6,26.7,26.8,26.9,27.0,27.1,
           27.2,27.3,27.4,27.5,27.6,27.7,
           27.8,27.9,28.0,
&

Set up data.pkg as follows:
# Packages
 &PACKAGES
 useMNC=.TRUE.,
 useOBCS=.FALSE.,
 usePtracers=.FALSE.,
 useRBCS=.FALSE.,
 useLayers=.TRUE.,
 useDiagnostics=.TRUE.,
 &

Set up data.diagnostics as follows:
# Diagnostic Package Choices
#--------------------
#  dumpAtLast (logical): always write output at the end of simulation (default=F)
#  diag_mnc   (logical): write to NetCDF files (default=useMNC)
#--for each output-stream:
#  fileName(n) : prefix of the output file name (max 80c long) for outp.stream n
#  frequency(n):< 0 : write snap-shot output every |frequency| seconds
#               > 0 : write time-average output every frequency seconds
#  timePhase(n)     : write at time = timePhase + multiple of |frequency|
#    averagingFreq  : frequency (in s) for periodic averaging interval
#    averagingPhase : phase     (in s) for periodic averaging interval
#    repeatCycle    : number of averaging intervals in 1 cycle
#  levels(:,n) : list of levels to write to file (Notes: declared as REAL)
#                when this entry is missing, select all common levels of this list
#  fields(:,n) : list of selected diagnostics fields (8.c) in outp.stream n
#                (see "available_diagnostics.log" file for the full list of diags)
#  missing_value(n) : missing value for real-type fields in output file "n"
#  fileFlags(n)     : specific code (8c string) for output file "n"
#--------------------
&DIAGNOSTICS_LIST
   fields(1,1) = 'PsiVEL    ',
   levels(1:24,1) = 1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.,17.,
                   18.,19.,20.,21.,22.,23.,24.,
   filename(1) = 'Psioutput1',
#monthly dumps

   frequency(1) = 2592000.,
   fields(1,2) = 'LaVH1RHO   ',
   levels(1:48,2) = 1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.,17.,
                   18.,19.,20.,21.,22.,23.,24.,25.,26.,27.,28.,29.,30.,31.,32.,
                   33.,34.,35.,36.,37.,38.,39.,40.,41.,42.,43.,44.,45.,46.,47.,
                   48.,
   filename(2) = 'Psioutput2',
#Monthy dumps
   frequency(2) = 2592000.,

&

&DIAG_STATIS_PARMS
&
#--------------------
# Parameter for Diagnostics of per level statistics:
#--------------------
# diagSt_mnc (logical): write stat-diags to NetCDF files (default=diag_mnc)
# diagSt_regMaskFile : file containing the region-mask to read-in
# nSetRegMskFile : number of region-mask sets within the region-mask file
# set_regMask(i) : region-mask set-index that identifies the region "i"
# val_regMask(i) : region "i" identifier value in the region mask
#--for each output-stream:
# stat_fName(n) : prefix of the output file name (max 80c long) for outp.stream n
# stat_freq(n):< 0 : write snap-shot output every |stat_freq| seconds
# > 0 : write time-average output every stat_freq seconds
# stat_phase(n) : write at time = stat_phase + multiple of |stat_freq|
# stat_region(:,n) : list of "regions" (default: 1 region only=global)
# stat_fields(:,n) : list of selected diagnostics fields (8.c) in outp.stream n
# (see "available_diagnostics.log" file for the full list of diags)
#--------------------


The available_diagnostics.log is generated upon a sucessful diagnostics run - if you lose this see the manual for an example data.diagnostics file and run with that to generate list of diagnostics

Here the layer diagnostics are at the end of the file and are for the use of calculating the residual stream function

If havign trouble

edit eedata

debugMode=.TRUE.,

and a txt file showing diagnostics status will be generated 